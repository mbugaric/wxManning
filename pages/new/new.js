"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var hotOrNew = 'new';
var common_1 = require("../../utils/common");
var app = getApp();
Page({
    data: {
        motto: common_1.getMottoForTab(hotOrNew),
        userInfo: {},
        bookData: {},
        sortedMEAPdata: [],
        sortedPublishedData: {},
        hasUserInfo: false,
        canIUse: wx.canIUse('button.open-type.getUserInfo'),
    },
    bindViewTap: function () {
        console.log(app.globalData);
    },
    onLoad: function () {
        this.setUserInfoData();
        this.setBookData();
    },
    setBookData: function () {
        var _this = this;
        if (app.globalData.bookData) {
            this.setData({
                bookData: app.globalData.bookData,
            }, function () {
                _this.prepareInitialSortedMEAPandPublishedBooks();
            });
        }
        else {
            app.bookDataReadyCallback = function (res) {
                _this.setData({
                    bookData: res,
                }, function () {
                    _this.prepareInitialSortedMEAPandPublishedBooks();
                });
            };
        }
    },
    onShow: function () {
        console.log(hotOrNew, app.globalData.bookDataObtained, "sortedMEAPdata", this.data.sortedMEAPdata, "!!!");
        console.log(hotOrNew, app.globalData.bookDataObtained, "sortedPublishedData", this.data.sortedPublishedData, "!!!");
    },
    prepareInitialSortedMEAPandPublishedBooks: function () {
        if (this.data.bookData) {
            if (this.data.bookData.meaps && this.data.bookData.meaps.length) {
                var sortingFunction = common_1.getSortingFunctionForTab(hotOrNew);
                var sortedMEAPdata = this.data.bookData.meaps.sort(sortingFunction);
                this.setData({
                    sortedMEAPdata: sortedMEAPdata
                });
            }
            if (this.data.bookData.published && this.data.bookData.published.length) {
                var sortingFunction = common_1.getSortingFunctionForTab(hotOrNew);
                var sortedPublishedData = this.data.bookData.published.sort(sortingFunction);
                this.setData({
                    sortedPublishedData: sortedPublishedData
                });
            }
        }
    },
    setUserInfoData: function () {
        var _this = this;
        if (app.globalData.userInfo) {
            this.setData({
                userInfo: app.globalData.userInfo,
                hasUserInfo: true,
            });
        }
        else if (this.data.canIUse) {
            app.userInfoReadyCallback = function (res) {
                _this.setData({
                    userInfo: res,
                    hasUserInfo: true
                });
            };
        }
        else {
            wx.getUserInfo({
                success: function (res) {
                    app.globalData.userInfo = res.userInfo;
                    _this.setData({
                        userInfo: res.userInfo,
                        hasUserInfo: true
                    });
                }
            });
        }
    },
    getUserInfo: function (e) {
        console.log(e);
        app.globalData.userInfo = e.detail.userInfo;
        this.setData({
            userInfo: e.detail.userInfo,
            hasUserInfo: true
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV3LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibmV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDO0FBU3ZCLDZDQUc0QjtBQUU1QixJQUFNLEdBQUcsR0FBRyxNQUFNLEVBQVUsQ0FBQztBQUc3QixJQUFJLENBQUM7SUFDSCxJQUFJLEVBQUU7UUFDSixLQUFLLEVBQUUsdUJBQWMsQ0FBQyxRQUFRLENBQUM7UUFDL0IsUUFBUSxFQUFFLEVBQUU7UUFDWixRQUFRLEVBQUUsRUFBZTtRQUN6QixjQUFjLEVBQUUsRUFBYztRQUM5QixtQkFBbUIsRUFBRSxFQUFrQjtRQUN2QyxXQUFXLEVBQUUsS0FBSztRQUNsQixPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyw4QkFBOEIsQ0FBQztLQUNwRDtJQUNELFdBQVc7UUFDVCxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUM3QixDQUFDO0lBRUQsTUFBTTtRQUNKLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVELFdBQVc7UUFBWCxpQkFnQkM7UUFmQyxJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFO1lBQzNCLElBQUksQ0FBQyxPQUFRLENBQUM7Z0JBQ1osUUFBUSxFQUFFLEdBQUcsQ0FBQyxVQUFVLENBQUMsUUFBUTthQUNsQyxFQUFFO2dCQUNELEtBQUksQ0FBQyx5Q0FBeUMsRUFBRSxDQUFBO1lBQ2xELENBQUMsQ0FBQyxDQUFBO1NBQ0g7YUFBTTtZQUNMLEdBQUcsQ0FBQyxxQkFBcUIsR0FBRyxVQUFDLEdBQVE7Z0JBQ25DLEtBQUksQ0FBQyxPQUFRLENBQUM7b0JBQ1osUUFBUSxFQUFFLEdBQUc7aUJBQ2QsRUFBRTtvQkFDRCxLQUFJLENBQUMseUNBQXlDLEVBQUUsQ0FBQTtnQkFDbEQsQ0FBQyxDQUFD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QUMzQixXQUFXLEVBQUUsSUFBSTtTQUNsQixDQUFDLENBQUE7SUFDSixDQUFDO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgaG90T3JOZXcgPSAnbmV3JztcblxuaW1wb3J0IHsgSU15QXBwIH0gZnJvbSAnLi4vLi4vYXBwJztcbmltcG9ydCB7XG4gIElCb29rRGF0YSxcbiAgSU1FQVBzLFxuICBJUHVibGlzaGVkXG59IGZyb20gJy4uLy4uL21vZGVscy9tb2RlbHMnO1xuXG5pbXBvcnQge1xuICBnZXRTb3J0aW5nRnVuY3Rpb25Gb3JUYWIsXG4gIGdldE1vdHRvRm9yVGFiXG59IGZyb20gJy4uLy4uL3V0aWxzL2NvbW1vbic7XG5cbmNvbnN0IGFwcCA9IGdldEFwcDxJTXlBcHA+KCk7XG5cblxuUGFnZSh7XG4gIGRhdGE6IHtcbiAgICBtb3R0bzogZ2V0TW90dG9Gb3JUYWIoaG90T3JOZXcpLFxuICAgIHVzZXJJbmZvOiB7fSxcbiAgICBib29rRGF0YToge30gYXMgSUJvb2tEYXRhLFxuICAgIHNvcnRlZE1FQVBkYXRhOiBbXSBhcyBJTUVBUHNbXSxcbiAgICBzb3J0ZWRQdWJsaXNoZWREYXRhOiB7fSBhcyBJUHVibGlzaGVkW10sXG4gICAgaGFzVXNlckluZm86IGZhbHNlLFxuICAgIGNhbklVc2U6IHd4LmNhbklVc2UoJ2J1dHRvbi5vcGVuLXR5cGUuZ2V0VXNlckluZm8nKSxcbiAgfSxcbiAgYmluZFZpZXdUYXAoKSB7XG4gICAgY29uc29sZS5sb2coYXBwLmdsb2JhbERhdGEpXG4gIH0sXG5cbiAgb25Mb2FkKCkge1xuICAgIHRoaXMuc2V0VXNlckluZm9EYXRhKCk7XG4gICAgdGhpcy5zZXRCb29rRGF0YSgpO1xuICB9LFxuXG4gIHNldEJvb2tEYXRhKCkge1xuICAgIGlmIChhcHAuZ2xvYmFsRGF0YS5ib29rRGF0YSkge1xuICAgICAgdGhpcy5zZXREYXRhISh7XG4gICAgICAgIGJvb2tEYXRhOiBhcHAuZ2xvYmFsRGF0YS5ib29rRGF0YSxcbiAgICAgIH0sICgpID0+IHtcbiAgICAgICAgdGhpcy5wcmVwYXJlSW5pdGlhbFNvcnRlZE1FQVBhbmRQdWJsaXNoZWRCb29rcygpXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBhcHAuYm9va0RhdGFSZWFkeUNhbGxiYWNrID0gKHJlczogYW55KSA9PiB7XG4gICAgICAgIHRoaXMuc2V0RGF0YSEoe1xuICAgICAgICAgIGJvb2tEYXRhOiByZXMsXG4gICAgICAgIH0sICgpID0+IHtcbiAgICAgICAgICB0aGlzLnByZXBhcmVJbml0aWFsU29ydGVkTUVBUGFuZFB1Ymxpc2hlZEJvb2tzKClcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgb25TaG93OiBmdW5jdGlvbiAoKSB7XG4gICAgY29uc29sZS5sb2coaG90T3JOZXcsIGFwcC5nbG9iYWxEYXRhLmJvb2tEYXRhT2J0YWluZWQsIFwic29ydGVkTUVBUGRhdGFcIiwgdGhpcy5kYXRhLnNvcnRlZE1FQVBkYXRhLCBcIiEhIVwiKVxuICAgIGNvbnNvbGUubG9nKGhvdE9yTmV3LCBhcHAuZ2xvYmFsRGF0YS5ib29rRGF0YU9idGFpbmVkLCBcInNvcnRlZFB1Ymxpc2hlZERhdGFcIiwgdGhpcy5kYXRhLnNvcnRlZFB1Ymxpc2hlZERhdGEsIFwiISEhXCIpXG4gIH0sXG5cbiAgcHJlcGFyZUluaXRpYWxTb3J0ZWRNRUFQYW5kUHVibGlzaGVkQm9va3MoKSB7XG4gICAgaWYgKHRoaXMuZGF0YS5ib29rRGF0YSkge1xuICAgICAgLy9NRUFQIGRhdGFcbiAgICAgIGlmICh0aGlzLmRhdGEuYm9va0RhdGEubWVhcHMgJiYgdGhpcy5kYXRhLmJvb2tEYXRhLm1lYXBzLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBzb3J0aW5nRnVuY3Rpb24gPSBnZXRTb3J0aW5nRnVuY3Rpb25Gb3JUYWIoaG90T3JOZXcpO1xuICAgICAgICBjb25zdCBzb3J0ZWRNRUFQZGF0YTogSU1FQVBzID0gdGhpcy5kYXRhLmJvb2tEYXRhLm1lYXBzLnNvcnQoc29ydGluZ0Z1bmN0aW9uKTtcbiAgICAgICAgdGhpcy5zZXREYXRhISh7XG4gICAgICAgICAgc29ydGVkTUVBUGRhdGE6IHNvcnRlZE1FQVBkYXRhXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgICAvL1B1Ymxpc2hlZCBkYXRhXG4gICAgICBpZiAodGhpcy5kYXRhLmJvb2tEYXRhLnB1Ymxpc2hlZCAmJiB0aGlzLmRhdGEuYm9va0RhdGEucHVibGlzaGVkLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBzb3J0aW5nRnVuY3Rpb24gPSBnZXRTb3J0aW5nRnVuY3Rpb25Gb3JUYWIoaG90T3JOZXcpO1xuICAgICAgICBjb25zdCBzb3J0ZWRQdWJsaXNoZWREYXRhOiBJUHVibGlzaGVkID0gdGhpcy5kYXRhLmJvb2tEYXRhLnB1Ymxpc2hlZC5zb3J0KHNvcnRpbmdGdW5jdGlvbik7XG4gICAgICAgIHRoaXMuc2V0RGF0YSEoe1xuICAgICAgICAgIHNvcnRlZFB1Ymxpc2hlZERhdGE6IHNvcnRlZFB1Ymxpc2hlZERhdGFcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cblxuICBzZXRVc2VySW5mb0RhdGEoKSB7XG4gICAgaWYgKGFwcC5nbG9iYWxEYXRhLnVzZXJJbmZvKSB7XG4gICAgICB0aGlzLnNldERhdGEhKHtcbiAgICAgICAgdXNlckluZm86IGFwcC5nbG9iYWxEYXRhLnVzZXJJbmZvLFxuICAgICAgICBoYXNVc2VySW5mbzogdHJ1ZSxcbiAgICAgIH0pXG4gICAgfSBlbHNlIGlmICh0aGlzLmRhdGEuY2FuSVVzZSkge1xuICAgICAgYXBwLnVzZXJJbmZvUmVhZHlDYWxsYmFjayA9IChyZXM6IGFueSkgPT4ge1xuICAgICAgICB0aGlzLnNldERhdGEhKHtcbiAgICAgICAgICB1c2VySW5mbzogcmVzLFxuICAgICAgICAgIGhhc1VzZXJJbmZvOiB0cnVlXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHd4LmdldFVzZXJJbmZvKHtcbiAgICAgICAgc3VjY2VzczogcmVzID0+IHtcbiAgICAgICAgICBhcHAuZ2xvYmFsRGF0YS51c2VySW5mbyA9IHJlcy51c2VySW5mb1xuICAgICAgICAgIHRoaXMuc2V0RGF0YSEoe1xuICAgICAgICAgICAgdXNlckluZm86IHJlcy51c2VySW5mbyxcbiAgICAgICAgICAgIGhhc1VzZXJJbmZvOiB0cnVlXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH0sXG5cbiAgZ2V0VXNlckluZm8oZTogYW55KSB7XG4gICAgY29uc29sZS5sb2coZSlcbiAgICBhcHAuZ2xvYmFsRGF0YS51c2VySW5mbyA9IGUuZGV0YWlsLnVzZXJJbmZvXG4gICAgdGhpcy5zZXREYXRhISh7XG4gICAgICB1c2VySW5mbzogZS5kZXRhaWwudXNlckluZm8sXG4gICAgICBoYXNVc2VySW5mbzogdHJ1ZVxuICAgIH0pXG4gIH1cbn0pXG4iXX0=